Logic-2 > round_sum
prev  |  next  |  chance
For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a b c, return the sum of their rounded values. To avoid code repetition, write a separate helper "def round10(num):" and call it 3 times. Write the helper entirely below and at the same indent level as round_sum().


round_sum(16, 17, 18) → 60
round_sum(12, 13, 14) → 30
round_sum(6, 4, 4) → 10

Solution:

def round_sum(a, b, c):
    result = round10(a) + round10(b) + round10(c)
    return result



def round10(num):
  res = [int(x) for x in str(num)]
  if res[-1] >= 5:
    rounded = round(num/10)*10 +10
    return int(rounded)
  else:
    rounded = round(num / 10) * 10
    return int(rounded)
    
    
    Expected	Run		
round_sum(16, 17, 18) → 60	60	OK	
round_sum(12, 13, 14) → 30	30	OK	
round_sum(6, 4, 4) → 10	10	OK	
round_sum(4, 6, 5) → 20	20	OK	
round_sum(4, 4, 6) → 10	10	OK	
round_sum(9, 4, 4) → 10	10	OK	
round_sum(0, 0, 1) → 0	0	OK	
round_sum(0, 9, 0) → 10	10	OK	
round_sum(10, 10, 19) → 40	40	OK	
round_sum(20, 30, 40) → 90	90	OK	
round_sum(45, 21, 30) → 100	100	OK	
round_sum(23, 11, 26) → 60	60	OK	
round_sum(23, 24, 25) → 70	70	OK	
round_sum(25, 24, 25) → 80	80	OK	
round_sum(23, 24, 29) → 70	70	OK	
round_sum(11, 24, 36) → 70	70	OK	
round_sum(24, 36, 32) → 90	90	OK	
round_sum(14, 12, 26) → 50	50	OK	
round_sum(12, 10, 24) → 40	40	OK	
other tests
OK	

All Correct
